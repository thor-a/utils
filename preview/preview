#!/bin/zsh

# Description:  Attempt at a general terminal previewer. E.g. used with fzf like this:
#
#     prv() {
#       FZF_DEFAULT_COMMAND='find . -mindepth 1 -maxdepth 1 -print0' \
#         fzf                      \
#           --read0                \
#           --print0               \
#           --multi                \
#           --ansi                 \
#           --reverse              \
#           --preview-window=top   \
#           --preview='preview {}'
#     }

# Check if used programs ara available (coreutils are assumed to be available)
needs() {
  some_prog_needed=0
  while [ -n "$1" ]; do
    which "$1" > /dev/null
    if [ $? -ne 0 ]; then
      printf "Warning: '%s' might be needed to run.\n" "$1" >&2
      some_prog_needed=1
    fi
    shift
  done
  return $some_prog_needed
}

needed_progs=(
  ar
  atool
  avr-readelf
  awk
  bat
  binwalk
  column
  convert
  file
  gpg
  gzip
  highlight
  ls.swp
  jq
  mlr
  odp2txt
  ods2tsv
  odt2txt
  openssl
  pdftocairo
  pdftotext
  ppt2odp
  ps2pdf
  python
  readelf
  sed
  sox
  sqlite3
  ssh-keygen
  tidy
  tree
  unzip
  tar
  vcal
  viu
  wasm-objdump
  xls2ods
  xlsx2csv
  xmlstarlet
  xxd
)

needs $needed_progs


# Functionality that is complicated or is used multiple times have their own functions
handle_x509() {
  openssl    x509 -in "$1"             -noout -issuer -subject -email -startdate -enddate -purpose -fingerprint 2> /dev/null \
  || openssl x509 -in "$1" -inform der -noout -issuer -subject -email -startdate -enddate -purpose -fingerprint 2> /dev/null
}

detect_csv() {
  seps=('\t' ' ' ',' ';' ':' '\\\\|')

  (( $(wc -l < "$infile") < 3 )) && return

  print -l $seps[@]           |
  while IFS= read -r sep; do
    nfields=$(head -n100 "$1" | 
              awk -F "$sep+" 'NF==0 { next } {print NF}' | sort -un)
    nlines=$(print -l "$nfields" | wc -l)

    print "$nfields\x1c$sep\x1c$nlines"
  done                    |

  # Only balanced csv files allowed, i.e. nlines==1
  awk -F '\x1c' '$3 == 1' |

  # Pick the one with most columns
  sort -k1,1nr            |
  head -n1
}


# Main program start
progname=${0##*/}
maxbytes=50000000

# Establish temporary directory
if [[ -d "$XDG_RUNTIME_DIR" && -w "$XDG_RUNTIME_DIR" ]]; then
  tmpdir="$XDG_RUNTIME_DIR/$progname"
else
  tmpdir="/tmp/$progname"
fi
mkdir -p "$tmpdir"
chmod go-rwx "$tmpdir"

infile="$1"

# Handle files coming from stdin
if [[ -z "$infile" ]]; then
  infile=$(mktemp "$tmpdir"/XXXXXX)
  cat > "$infile"
fi

ext="${infile##*.}"
fsz=$(stat -c '%s' "$infile")

typeset -A csvoverride
csvoverride[yml]=1
csvoverride[yaml]=1
csvoverride[key]=1
csvoverride[xml]=1

if [[ -r "$infile" ]]; then

  # limit handling of large files
  if (( fsz > $maxbytes )); then
    tmpfile=$(mktemp "$tmpdir"/XXXXXX)
    head -c$maxbytes "$infile" > "$tmpfile"
    infile="$tmpfile"
  fi

  file -Lbi "$infile" | sed 's/;//; s/[^ ]*=//' | read ftype encoding
  description=$(file -L "$infile")

  [[ "$ftype" == "inode/directory" ]] \
    && sz=$(stat -c '%h' "$infile")   \
    || sz=$(<"$infile" wc -c | numfmt --to=si)
  
  print "$ftype; $encoding; $sz"
  print "$description\n"

  case $ftype in

    (application/(gzip|x-(7z-compressed|bzip2|tar|xz)))
      als -q "$infile" || gzip -dc "$infile" | bat -nf
      ;;

    (application/json)
      jq -C . "$infile"
      ;;

    (application/octet-stream)
      filedone=0

      case "$ext" in
        (crt)
          handle_x509 "$infile"
          filedone=1
          ;;
        (mp3)
          soxi "$infile"
          viu =(sox "$infile" -n spectrogram -o -)
          ;;
        (o|wasm)
          if [[ "$description" =~ '.*wasm.*' ]]; then
            wasm-objdump -h "$infile" | sed '1d; 2s/^[^ ]* //; 5d'
            wasm-objdump -d "$infile" | sed '2,3d; 5d'
            wasm-objdump -s "$infile" | sed '2,3d'
            filedone=1
          else
            print "Unknown object format"
          fi
          ;;
        (pfx)
          PYTHONWARNINGS=ignore binwalk "$infile"
          filedone=1
          ;;
        (swp|swm|swo)
          ls.swp "$infile"
          filedone=1
          ;;
      esac

      if ! (( filedone )); then
        if [[ "$description" =~ '.*Certificate.*' ]]; then
          handle_x509 "$infile"
        elif [[ "$description" =~ '.*Vim swap file.*' ]]; then
          filedone=1
        else
          print "Unknown format ... attempting extraction with binwalk(1).\n"

          binwalk "$infile" 2> /dev/null | sed '1,3d' | read offset _ desc

          if [[ "$desc" =~ '.*Certificate.*' ]]; then
            tmpfile=$(mktemp "$tmpdir"/XXXXXX)
            dd if="$infile" bs=1 skip="$offset" status=none > "$tmpfile"
            handle_x509 "$tmpfile"
          else
            print "Still unknown, checking for text.\n"

            if [[ "$encoding" == "binary" ]]; then
              how_ascii=$(( 1.0 * $(<"$infile" tr -d --complement '[[:print:][:space:]]' | wc -c) \
                                 / $(<"$infile" wc -c) ))
              if (( how_ascii > 0.8 )); then 
                tr -d --complement '[[:print:][:space:]]' < "$infile" |
                bat -nf
              else
                print "Looks like a binary file, here is a hexdump.\n"
                xxd "$infile"
              fi
            else
              bat -nf "$infile"
            fi
          fi
        fi
      fi
      ;;

    (application/pdf)
      tmpfile=$(mktemp "$tmpdir"/XXXXXX)
      pdftotext "$infile" - > "$tmpfile"

      if (( $(wc -l < $tmpfile) == 0 )); then
        pdftocairo -png -singlefile "$infile" - | viu -
      else
        printf "%s\n" "$(<$tmpfile)"
      fi
      ;;

    (application/pgp-encrypted)
      case "$encoding" in
        (us-ascii)
          bat -nf "$infile"
          ;;
        (*)
          xxd "$infile"
          ;;
      esac
      ;;

    (application/pgp-keys)
      gpg --show-key "$infile"
      ;;

    (application/postscript)
      tmpfilepdf=$(mktemp "$tmpdir"/XXXXXX)
      tmpfiletxt=$(mktemp "$tmpdir"/XXXXXX)

      ps2pdf    "$infile"     - > "$tmpfilepdf"
      pdftotext "$tmpfilepdf" - > "$tmpfiletxt"

      if (( $(wc -l < "$tmpfiletxt") == 0 )); then
        pdftocairo -png -singlefile "$tmpilepdf" - | viu -
      else
        printf "%s\n" "$(<$tmpfiletxt)"
      fi
      ;;

    (application/vnd.debian.binary-package)
      ar t "$infile" |
      tail -n+2      |
      while read file; do
        print "${file}:"
        als -q =(ar p "$infile" "$file")
        print "\n"
      done
      ;;

    (application/vnd.ms-excel)
      xls2ods --stdout "$infile" 2> /dev/null | ods2tsv
      ;;

    (application/vnd.ms-powerpoint)
      odp2txt =(ppt2odp --stdout "$infile" 2> /dev/null)
      ;;

    (application/vnd.oasis.opendocument.presentation)
      odp2txt "$infile"
      ;;

    (application/vnd.oasis.opendocument.spreadsheet)
      ods2tsv "$infile"
      ;;

    (application/vnd.oasis.opendocument.text)
      odp2txt "$infile"
      ;;

    (application/vnd.openxmlformats-officedocument.wordprocessingml.document)
      odt2txt =(doc2odt --stdout "$infile" 2>/dev/null) 
      ;;

    (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
      number_of_sheets=$(unzip -l dims.xlsx | grep worksheets | wc -l)
      print "$number_of_sheets sheets found.\n"
      xlsx2csv "$infile"
      ;;

    (application/vnd.sqlite3)
      # Generate a summary by printing rows, tables and columns with data type
      print ".tables" | sqlite3 -init /dev/null "$infile" | fmt -w1 |
      while read tbl; do
        tblrows=$(print "select count(*) from $tbl" | sqlite3 -init /dev/null "$infile")
        printf "$tblrows\t$tbl\t"

        # Print column name and data type
        print "pragma table_info($tbl)" | sqlite3 -init /dev/null "$infile" | 
        awk -F'|' 'NR>1 { printf ", " } { printf "%s(%s)", $2, $3 } END { printf "\n" }'
      done          |
      grep -v '^0'  |
      sort -n       |
      column -t
      ;;

    (application/x-(|pie-)(executable|object))
      if [[ "$description" =~ '.*ELF.*' ]]; then
        if [[ "$description" =~ '.*AVR.*' ]]; then
          prefix="avr-"
        else
          prefix=""
        fi
        ${prefix}readelf -S "$infile" | sed -nE '/\.rodata/ s/.*\[|\].*//gp' | read rodata
        if [[ -n "$rodata" ]]; then
          ${prefix}readelf -p "$rodata" "$infile"
        fi
        ${prefix}readelf -a "$infile"
      fi
      ;;

    (application/zip)
      unzip -l "$infile"

      if [[ "$ext" == "ggb" ]]; then
        printf "\n"
        unzip -p "$infile" geogebra_thumbnail.png | viu -
      fi
      ;;

    (audio/(flac|ogg|x-wav|mpeg))
      soxi "$infile"
      viu =(sox "$infile" -n spectrogram -o -)
      ;;

    (biosig/edf)
      bat -nf "$infile"
      ;;

    (image/(gif|jpeg|png|webp|x-portable-(bitmap|greymap|pixmap)))
      viu "$infile" 2> /dev/null

      if (( $? != 0 )); then
        print "Warning: Not an image.\n"
        if [[ "$encoding" == "us-ascii" ]]; then
          bat -nf "$infile"
        else
          xxd "$infile"
        fi
      fi
      ;;

    (image/x-xcf)
      convert -alpha on -background none -layers merge "$infile" png:- 2> /dev/null |
      viu - 2> /dev/null

      if (( $? != 0 )); then
        print "Warning: Not an image.\n"
        if [[ "$encoding" == "us-ascii" ]]; then
          bat -nf "$infile"
        else
          xxd "$infile"
        fi
      fi
      ;;

    (inode/directory) 
      tree "$infile"
      ;;

    (inode/x-empty) 
      ;;

    (message/rfc822)
      bat -nf "$infile"
      ;;

    (text/calendar)
      vcal -a "$infile"
      ;;

    (text/(csv|plain|PGP|x-(|script.)(awk|c|makefile|perl|python|ruby|shellscript|tex)))
      detect_csv "$infile" | IFS=$'\x1c' read nfields sep nlines

      if [[ -z $csvoverride[$ext] ]] && [[ -n "$nlines" ]] && (( nfields > 1 )); then
        sepname="$sep"
        [[ "$sep" == " "   ]] && sepname='space'
        [[ "$sep" == $'\t' ]] && sepname='tab'
        print "CSV file detected:   sep:$sepname   fields:$nfields   nlines:$nlines\n"
        mlr -N --ifs "$sep" --icsv --opprint cat "$infile" || bat -nf "$infile"
      else

        filedone=0

        if   [[ "$description" =~ '.*PEM RSA private key.*' ]]; then
          openssl rsa -noout -text -in "$infile"; filedone=1
        elif [[ "$description" =~ '.*PEM.*' ]]; then
          handle_x509 "$infile"; filedone=1
        elif [[ "$description" =~ '.*awk.*' ]]; then
          bat -nfl awk "$infile"; filedone=1
        elif [[ "$description" =~ '.*makefile.*' ]]; then
          bat -nfl make "$infile"; filedone=1
        elif [[ "$description" =~ '.*OpenSSH private key.*' ]]; then
          ssh-keygen -vlf "$infile"; filedone=1
        elif [[ "$description" =~ '.*(perl|raku).*' ]]; then
          bat -nfl perl "$infile"; filedone=1
        elif [[ "$description" =~ '.*PGP signed message.*' ]]; then
          bat -nf "$infile"; filedone=1
        fi

        if ! (( filedone )); then
          case "$ext" in
            (aux)
              bat -nfl latex "$infile"
              ;;
            (js)
              js-beautify "$infile" | bat -nfl js
              ;;
            (json)
              jq -C . "$infile" || bat -nf "$infile"
              ;;
            (key)
              openssl rsa -noout -text -in "$infile"
              ;;
            (ps)
              highlight -Oxterm256 -szmrok -Sps "$infile"
              ;;
            (xml)
              xml fo "$infile" | bat -nfl xml
              ;;
            (*)
              bat -nf "$infile"
              ;;
          esac
        fi
      fi
      ;;

    (text/html)
      tidy -i --tidy-mark no "$infile" 2> /dev/null | bat -nfl html
      ;;

    (text/troff)
      if [[ "$ext" == "ckt" ]]; then
        # circuit simulation file generated by gSpiceUI
        bat -nf "$infile"
      fi
      ;;

    (text/xml|image/svg+xml)
      xml format -R "$infile" | bat -nfl xml
      ;;

    (text/x-diff)
      bat -nfl diff "$infile"
      ;;

    (*)
      # Check for known extensions

      case "$ext" in
        (crt)
          handle_x509 "$infile"
          ;;
        (*)
          print "Unknown fileype, here is a hexdump:\n"
          xxd "$infile"
          ;;
      esac
      ;;

    esac
  #print $ftype

else
  print "Unable to read file: '$infile'"
fi

# Cleanup temporary directory
find "$tmpdir"             -type f -delete
find "$tmpdir" -mindepth 1 -type d -delete
